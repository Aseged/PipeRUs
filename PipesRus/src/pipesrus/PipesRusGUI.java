package pipesrus;


import java.text.DecimalFormat;
import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Aseged
 */

public class PipesRusGUI extends javax.swing.JFrame {
    
    /**
     * Creates new form PipesRusGUI
     */
    public PipesRusGUI() {
       initComponents();
       setTitle("Pipe R'us");
       
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        CheckOutButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        totalPrice = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        errorDisplay1 = new javax.swing.JLabel();
        errorDisplay2 = new javax.swing.JLabel();
        Colour = new javax.swing.JComboBox<String>();
        Grade = new javax.swing.JComboBox<String>();
        Insulation = new javax.swing.JComboBox<String>();
        Reinforcement = new javax.swing.JComboBox<String>();
        Chemical = new javax.swing.JComboBox<String>();
        QuoteButton = new javax.swing.JButton();
        ClearOrderButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        HelpButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        Length = new javax.swing.JTextField();
        Diameter = new javax.swing.JTextField();
        Quantity = new javax.swing.JTextField();
        Success = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OutputPane = new javax.swing.JList<String>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(0, 0, 255));
        jTextField1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("PipesR'us");
        jTextField1.setBorder(null);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Your Order");

        CheckOutButton.setBackground(new java.awt.Color(255, 255, 255));
        CheckOutButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        CheckOutButton.setForeground(new java.awt.Color(0, 0, 255));
        CheckOutButton.setText("Check Out");
        CheckOutButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 0), 4, true));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Total ");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        totalPrice.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        totalPrice.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Grade");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Colour");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Insulation");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Reinforcement");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Chemical resistant");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Quantity ");

        errorDisplay1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        errorDisplay1.setForeground(new java.awt.Color(204, 0, 0));

        errorDisplay2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        errorDisplay2.setForeground(new java.awt.Color(204, 0, 0));

        Colour.setBackground(new java.awt.Color(255, 204, 255));
        Colour.setForeground(new java.awt.Color(102, 102, 102));
        Colour.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2" }));

        Grade.setBackground(new java.awt.Color(255, 204, 255));
        Grade.setForeground(new java.awt.Color(102, 102, 102));
        Grade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));

        Insulation.setBackground(new java.awt.Color(255, 204, 255));
        Insulation.setForeground(new java.awt.Color(102, 102, 102));
        Insulation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No" }));
        Insulation.setSelectedIndex(1);

        Reinforcement.setBackground(new java.awt.Color(255, 204, 255));
        Reinforcement.setForeground(new java.awt.Color(102, 102, 102));
        Reinforcement.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No" }));
        Reinforcement.setSelectedIndex(1);

        Chemical.setBackground(new java.awt.Color(255, 204, 255));
        Chemical.setForeground(new java.awt.Color(102, 102, 102));
        Chemical.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No" }));
        Chemical.setSelectedIndex(1);

        QuoteButton.setBackground(new java.awt.Color(51, 255, 51));
        QuoteButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        QuoteButton.setForeground(new java.awt.Color(0, 0, 255));
        QuoteButton.setText("Quote");
        QuoteButton.setActionCommand("");
        QuoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuoteButtonActionPerformed(evt);
            }
        });

        ClearOrderButton.setBackground(new java.awt.Color(51, 255, 51));
        ClearOrderButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ClearOrderButton.setForeground(new java.awt.Color(0, 0, 255));
        ClearOrderButton.setText("Remove Selected Item");
        ClearOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearOrderButtonActionPerformed(evt);
            }
        });

        ExitButton.setBackground(new java.awt.Color(51, 255, 51));
        ExitButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ExitButton.setForeground(new java.awt.Color(0, 0, 255));
        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        HelpButton.setBackground(new java.awt.Color(51, 255, 51));
        HelpButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        HelpButton.setForeground(new java.awt.Color(0, 0, 255));
        HelpButton.setText("Help");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 255));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Length (Meters)");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 51, 255));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Outer Diameter (inch)");

        Length.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LengthActionPerformed(evt);
            }
        });

        Success.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Success.setForeground(new java.awt.Color(0, 204, 0));

        OutputPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 0), 4));
        OutputPane.setForeground(new java.awt.Color(0, 0, 153));
        jScrollPane1.setViewportView(OutputPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(errorDisplay2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel16))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(errorDisplay1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(QuoteButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(Colour, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(Grade, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(Insulation, javax.swing.GroupLayout.Alignment.LEADING, 0, 338, Short.MAX_VALUE)
                                                .addComponent(Reinforcement, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(Chemical, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(Quantity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                                                .addComponent(Diameter, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(Length, javax.swing.GroupLayout.Alignment.LEADING))
                                            .addComponent(Success, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(24, 24, 24))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(HelpButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 147, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addComponent(ClearOrderButton)
                    .addComponent(CheckOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Insulation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(Grade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(Colour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(Reinforcement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(Chemical, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(Length, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Diameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(Quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(QuoteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Success, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errorDisplay1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(errorDisplay2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClearOrderButton)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(totalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HelpButton, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(149, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    DefaultListModel model = new DefaultListModel();
    DecimalFormat dsF = new DecimalFormat("#.##");
    double total = 0;

    private void QuoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuoteButtonActionPerformed
        // TODO add your handling code here:
              /**
               * Here, we will prevent the user from inserting invalid input
               * 
               */ 
        //get input from the user for comparing order
        int type0colour = 0, type1colour = 1, type2colour = 2;      
        String type1insulations = "No", type2insulations = "Yes";
        String type1Reinforcements = "No", type2Reinforcements = "Yes";
        int getGrade = Grade.getSelectedIndex()+ 1;
        int getColour = Colour.getSelectedIndex();
        String getInsulation = String.valueOf (Insulation.getSelectedItem());
        String getReinforcement = String.valueOf (Reinforcement.getSelectedItem());
        
                //set the "order success" text to null 
                 Success.setText("");
                 try{   
                     //prevent user from ordering a pipe more than 6 meters long     
                    if ((Double.parseDouble(Length.getText()) > 6)){
                    errorDisplay1.setText("The pipe cannot be longer than 6 meters!");
                        return;
                    }else
                        //prevent user from inserting 0
                    if (Integer.parseInt(Quantity.getText()) <= 0){
                    errorDisplay1.setText("Quantity cannot be 0!");
                    return;

                    }else
                        //Here, we have made an assumption that the diameter of the pipe should exceed 
                        //2 meters
                    if ((Double.parseDouble(Diameter.getText()) > 2)
                            ||(Double.parseDouble(Diameter.getText()) <= 0)){
                    errorDisplay1.setText("The diameter must be greater than 0 and less than 2 meters.");
                    return;

                    }else
                        //prevent empty textbox
                    if (Quantity.getText().isEmpty() 
                            || Diameter.getText().isEmpty() 
                            || Length.getText().isEmpty())
                    {
                    errorDisplay2.setText("You may not enter an empty value");
                     return;
                     } else
                        //prevent negative input
                    if ((Double.parseDouble(Length.getText()) <= 0)
                        ||(Double.parseDouble(Diameter.getText()) <= 0)
                                ||(Double.parseDouble(Quantity.getText()) <= 0))
                            {
                               
                        errorDisplay2.setText("One of you input is not valid!");
                         return;
                         
                    }
                   else {
                        errorDisplay1.setText("");
                        errorDisplay2.setText("");
                 }
               }
                 //this exception will handle any text entered in the text box
            catch(NumberFormatException e){
                errorDisplay2.setText("Please enter a valid input!");
            }
            //any other exeption will be handled here.
            catch(Exception e){
                errorDisplay2.setText("Something is not right, try again please!"); 
            
            }
               
                /**
                 * Here, we get the input from the user and make the necessary changes
                 * ready for use
                 */
                double lengthInch = Double.parseDouble(Length.getText()) * 39.37;
                double innerRadius = (Double.parseDouble(Diameter.getText())/2)* .9;
                int quantity = Integer.parseInt(Quantity.getText()); 
                int grade = Grade.getSelectedIndex() + 1;
                int colour = Colour.getSelectedIndex();
                String insulations = String.valueOf (Insulation.getSelectedItem());
                String reinforcements = String.valueOf (Reinforcement.getSelectedItem());
                String chemicals = String.valueOf (Chemical.getSelectedItem());
                double GradeCosts = 0;
                double SubTotalCosts = 0;

                
                //if the input is not zero, the continue...
              if ((quantity != 0) && (lengthInch != 0) && (innerRadius != 0)){  
                
                try {
                 //calculate volume   
                double volume = Math.PI*((innerRadius*innerRadius))*lengthInch;
                //round decimal
                
                //calculate cost of each grade of pipe
                    switch (grade) {

                        case 1: 
                                GradeCosts = volume *  0.30;
                           break;
                        case 2: 
                               GradeCosts = volume * 0.32;
                               break;
                        case 3: 
                               GradeCosts = volume * 0.35;
                             break;
                        case 4: 
                               GradeCosts = volume * 0.40;
                             break;
                        case 5: 
                               GradeCosts = volume * 0.46;
                             break;


                    }
                       //add colour to the subtotal
                    switch (colour){
                        case 0:
                            SubTotalCosts = GradeCosts;
                            break;
                        case 1:
                            SubTotalCosts = GradeCosts * 1.2;
                            break;
                        case 2:
                            SubTotalCosts = GradeCosts * 1.7;
                            break;

                    }
            //if grade is 1, do all calculation in case 1        
            switch(getGrade){
            case 1:
                if((getColour == type0colour)&&
                        (getInsulation == type1insulations)&&
                        (getReinforcement == type1Reinforcements)){
              
                     //gather order information    
                                model.addElement("Pipe Grade:" + " " + grade + "\n" +" " +" " +
                                "Length of Pipe(meters):" + " " +dsF.format(lengthInch/39.37) + "\n" +" " +" " +
                                "Inner Radius of Pipe:" + " " + dsF.format(innerRadius) + "\n" +" " +" " +
                                "Colour of choice:" +" "+ colour + "\n" +  " " +" " +
                                "Quantity:" +" "+ quantity + "\n" + "\n" +" " +" " +
                                "Subtotal:" +" " + " " +" " +"£" +dsF.format(SubTotalCosts * quantity)+ "\n"
                                );
                                OutputPane.setModel(model);
                                
                                    //calculate total price 
                                    total =  (total+(SubTotalCosts * quantity));
                                    
                                    //add extras if required
                                    if ("Yes".equals(insulations)){
                                            total *= 1.4;
                                        }
                                            if ("Yes".equals(reinforcements)){
                                                total *= 1.5;
                                            } 
                                                if ("Yes".equals(chemicals)){
                                                    total *= 1.2;
                                                        }
                                                //display total price
                                                        totalPrice.setText(String.valueOf("£" +dsF.format(total)));                                 
                                                        Success.setText("Order successfully added.");
                //if no grade cannot be ordered, tell the user why                                        
                }else{ 
                    if (getColour != type0colour){
                    errorDisplay1.setText("");
                    errorDisplay1.setText("Grade pipe 1 cannot have Colour choice 1 or 2.");
                    }else
                    if (getInsulation != type1insulations){
                    errorDisplay1.setText("");
                    errorDisplay1.setText("Grade pipe 1 cannot have Inner insulation.");
                    }else
                    if (getReinforcement != type1Reinforcements){
                    errorDisplay1.setText("");
                    errorDisplay1.setText("Grade pipe 1 cannot have Reinforcement.");
                    }
                }
            break;
            //if grade is 1, do all calculation in case 2
            case 2:
                if (((getColour == type0colour)||(getColour == type1colour))&& ((getInsulation == type1insulations)&&(getReinforcement == type1insulations))) {
                    //gather order information    
                                model.addElement("Pipe Grade:" + " " + grade + "\n" +" " +" " +
                                "Length of Pipe(meters):" + " " +dsF.format(lengthInch/39.37) + "\n" +" " +" " +
                                "Inner Radius of Pipe:" + " " + dsF.format(innerRadius) + "\n" +" " +" " +
                                "Colour of choice:" +" "+ colour + "\n" +  " " +" " +
                                "Quantity:" +" "+ quantity + "\n" + "\n" +" " +" " +
                                "Subtotal:" +" " + " " +" " +"£" +dsF.format(SubTotalCosts * quantity)+ "\n"
                                );
                                OutputPane.setModel(model);
                                
                                    //calculate total price 
                                    total =  (total+(SubTotalCosts * quantity));
                                    
                                    //add extras if required
                                    if ("Yes".equals(insulations)){
                                            total *= 1.4;
                                        }
                                            if ("Yes".equals(reinforcements)){
                                                total *= 1.5;
                                            } 
                                                if ("Yes".equals(chemicals)){
                                                    total *= 1.2;
                                                        }
                                                //display total price
                                                        totalPrice.setText(String.valueOf("£" +dsF.format(total)));                                 
                                                        Success.setText("Order successfully added.");
                }else{
                    if (((getColour == type0colour)|| (getColour == type1colour))&&
                            (getInsulation == type2insulations)|| (getReinforcement == type2Reinforcements)){
                        errorDisplay1.setText("");
                    errorDisplay1.setText("Wrong colour for inner insulation and reinforncement.");
                    }else
                    if (((getColour == type0colour)|| (getColour == type1colour))&&((getInsulation == type1insulations)&& (getReinforcement == type2Reinforcements)) ||
                            ((getInsulation == type2insulations)&& (getReinforcement == type2Reinforcements))){
                    errorDisplay1.setText("");
                    errorDisplay1.setText("Wrong combination of inner insulation and reinforncement.");
                    }
                }
            break;
            //if grade is 1, do all calculation in case 3
            case 3:
                   if (((getColour == type0colour)&& ((getInsulation == type1insulations)&& (getReinforcement == type1Reinforcements)))||
                           ((getColour == type1colour)&& ((getInsulation == type1insulations)&& (getReinforcement == type1Reinforcements)))
                           ||((getColour == type2colour)&& ((getInsulation == type1insulations)&& (getReinforcement == type1Reinforcements)))||
                           ((getColour == type2colour)&& ((getInsulation == type2insulations)&& (getReinforcement == type1Reinforcements)))
                           ||((getColour == type2colour)&& ((getInsulation == type2insulations)&& (getReinforcement == type2Reinforcements)))){
                                //gather order information    
                                model.addElement("Pipe Grade:" + " " + grade + "\n" +" " +" " +
                                "Length of Pipe(meters):" + " " +dsF.format(lengthInch/39.37) + "\n" +" " +" " +
                                "Inner Radius of Pipe:" + " " + dsF.format(innerRadius) + "\n" +" " +" " +
                                "Colour of choice:" +" "+ colour + "\n" +  " " +" " +
                                "Quantity:" +" "+ quantity + "\n" + "\n" +" " +" " +
                                "Subtotal:" +" " + " " +" " +"£" +dsF.format(SubTotalCosts * quantity)+ "\n"
                                );
                                OutputPane.setModel(model);
                                
                                    //calculate total price 
                                    total =  (total+(SubTotalCosts * quantity));
                                    
                                    //add extras if required
                                    if ("Yes".equals(insulations)){
                                            total *= 1.4;
                                        }
                                            if ("Yes".equals(reinforcements)){
                                                total *= 1.5;
                                            } 
                                                if ("Yes".equals(chemicals)){
                                                    total *= 1.2;
                                                        }
                                                //display total price
                                                        totalPrice.setText(String.valueOf("£" +dsF.format(total)));                                 
                                                        Success.setText("Order successfully added.");
                        }else
                   if (((getInsulation == type1insulations)&& (getReinforcement == type2Reinforcements))){
                    errorDisplay1.setText("");
                    errorDisplay1.setText("Reinforcement on grade pipe 3 must be ordered with inner insulation.");
                    
                   }
            break;
                //if grade is 1, do all calculation in case 4
            case 4:
                if(((getColour == type1colour) && ((getInsulation == type1insulations)&&(getReinforcement == type1Reinforcements)))||
                        (((getColour == type2colour) && ((getInsulation == type1insulations)&&(getReinforcement == type1Reinforcements))))||
                        (((getColour == type2colour) && ((getInsulation == type2insulations)&&(getReinforcement == type2Reinforcements))))){
                     model.addElement("Pipe Grade:" + " " + grade + "\n" +" " +" " +
                                "Length of Pipe(meters):" + " " +dsF.format(lengthInch/39.37) + "\n" +" " +" " +
                                "Inner Radius of Pipe:" + " " + dsF.format(innerRadius) + "\n" +" " +" " +
                                "Colour of choice:" +" "+ colour + "\n" +  " " +" " +
                                "Quantity:" +" "+ quantity + "\n" + "\n" +" " +" " +
                                "Subtotal:" +" " + " " +" " +"£" +dsF.format(SubTotalCosts * quantity)+ "\n"
                                );
                                OutputPane.setModel(model);
                                
                                    //calculate total price 
                                    total =  (total+(SubTotalCosts * quantity));
                                    
                                    //add extras if required
                                    if ("Yes".equals(insulations)){
                                            total *= 1.4;
                                        }
                                            if ("Yes".equals(reinforcements)){
                                                total *= 1.5;
                                            } 
                                                if ("Yes".equals(chemicals)){
                                                    total *= 1.2;
                                                        }
                                                //display total price
                                                        totalPrice.setText(String.valueOf("£" +dsF.format(total)));                                 
                                                        Success.setText("Order successfully added.");
                }else{
                    if (getColour == type0colour){
                    errorDisplay1.setText("");
                    errorDisplay1.setText("Grade pipe 4 cannot have Colour choice 0.");
                    }
                        
                    if ((getInsulation == type1insulations)&& (getReinforcement == type2Reinforcements)){
                    errorDisplay1.setText("");
                    errorDisplay1.setText("Grade pipe 4 must have Inner insulation with reinforcement.");
                    } 
                    
                }
            break;
                //if grade is 1, do all calculation in case 5
            case 5:
                if(((getColour == type2colour) && ((getInsulation == type1insulations) && (getReinforcement == type1Reinforcements))||
                        ((getInsulation == type2insulations)&&(getReinforcement == type2Reinforcements))||((getInsulation == type2insulations)&&(getReinforcement == type2Reinforcements)))){

                   //gather order information    
                                model.addElement("Pipe Grade:" + " " + grade + "\n" +" " +" " +
                                "Length of Pipe(meters):" + " " +dsF.format(lengthInch/39.37) + "\n" +" " +" " +
                                "Inner Radius of Pipe:" + " " + dsF.format(innerRadius) + "\n" +" " +" " +
                                "Colour of choice:" +" "+ colour + "\n" +  " " +" " +
                                "Quantity:" +" "+ quantity + "\n" + "\n" +" " +" " +
                                "Subtotal:" +" " + " " +" " +"£" +dsF.format(SubTotalCosts * quantity)+ "\n"
                                );
                                OutputPane.setModel(model);
                                
                                    //calculate total price 
                                    total =  (total+(SubTotalCosts * quantity));
                                    
                                    //add extras if required
                                    if ("Yes".equals(insulations)){
                                            total *= 1.4;
                                        }
                                            if ("Yes".equals(reinforcements)){
                                                total *= 1.5;
                                            } 
                                                if ("Yes".equals(chemicals)){
                                                    total *= 1.2;
                                                        }
                                                //display total price
                                                        totalPrice.setText(String.valueOf("£" +dsF.format(total)));                                 
                                                        Success.setText("Order successfully added.");
                    
                }else{
                    if ((getColour != type2colour)){
                    errorDisplay1.setText("");
                    errorDisplay1.setText("Grade pipe 5 cannot have Colour choice 0 or 1.");
                    }
                        
                    if ((getInsulation == type1insulations)&& (getReinforcement == type2Reinforcements)){
                    errorDisplay1.setText("");
                    errorDisplay1.setText("Grade pipe 5 must have Inner insulation with reinforcement..");
                    }
                }
                
            break;
        }
             
            //handle any exception here
            }
            catch(NumberFormatException e){
                errorDisplay2.setText("Please enter a valid input!");
            }            
            catch(Exception e){
                errorDisplay2.setText("Something is not right, try again please!");             
            }      
       }          
    }//GEN-LAST:event_QuoteButtonActionPerformed

    private void LengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LengthActionPerformed
        
    }//GEN-LAST:event_LengthActionPerformed

    //when user cancel order, delete selection and subtract price from total
    private void ClearOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearOrderButtonActionPerformed
        // TODO add your handling code here:
        model.removeElementAt(OutputPane.getSelectedIndex());
       
        //TODDO ******************TODO
        double takeawayPrice = Double.parseDouble(OutputPane.getSelectedValue());

        //total = (total - takeawayPrice);
        //total =  (total-(SubTotalCosts * quantity));                                  
        totalPrice.setText(String.valueOf("Take away" +dsF.format(total)));

        //totalPrice.setText("");
    }//GEN-LAST:event_ClearOrderButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        //EXIT SYSTEM
        System.exit(0);        
    }//GEN-LAST:event_ExitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PipesRusGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PipesRusGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PipesRusGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PipesRusGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
 
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PipesRusGUI().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CheckOutButton;
    private javax.swing.JComboBox<String> Chemical;
    private javax.swing.JButton ClearOrderButton;
    private javax.swing.JComboBox<String> Colour;
    private javax.swing.JTextField Diameter;
    private javax.swing.JButton ExitButton;
    private javax.swing.JComboBox<String> Grade;
    private javax.swing.JButton HelpButton;
    private javax.swing.JComboBox<String> Insulation;
    private javax.swing.JTextField Length;
    private javax.swing.JList<String> OutputPane;
    private javax.swing.JTextField Quantity;
    private javax.swing.JButton QuoteButton;
    private javax.swing.JComboBox<String> Reinforcement;
    private javax.swing.JLabel Success;
    private javax.swing.JLabel errorDisplay1;
    private javax.swing.JLabel errorDisplay2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel totalPrice;
    // End of variables declaration//GEN-END:variables
}
